import { config } from "dotenv"; // import the API KEY from .env file
config() 

import { Configuration, OpenAIApi } from "openai"; // import the configuration and the OpenApi ()
import readline from "readline" 


const openai = new OpenAIApi( new Configuration( // create a new version of openai and a configuration
    {apiKey: process.env.API_KEY // get the api key from the .env file API_KEY variable
}))


const userInterface = readline.createInterface({    // user input function
    input: process.stdin,  
    output: process.stdout
})


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// const chatHistory = []; // store chat history
userInterface.prompt() // prompt for the user 
try{
    // const message = chatHistory.map(([role, content]) => ({role, content})) // construct msgs by iterating over the history
    
    var finalMessage;
    userInterface.on("line", async input => {  
        const result0 = await openai
        .createChatCompletion(  
            {model: "gpt-3.5-turbo", //gpt version
            messages: [{role: "user", content: input + "Is the above text related to animals or are they animal related issues? Give only Yes or No."}],  //check if the user input is related to animals or not using chatGPT  
        })

        

        if (result0.data.choices[0].message.content == ("Yes" || "yes" || "Yes." || "yes." || "YES" || "YES.")){
            
            const result = await openai
            .createChatCompletion(  
                {model: "gpt-3.5-turbo", //gpt version
                messages: [{role: "user", content: input + "Is the above text related to animal welfare organisations, locations or related to locational information? Give only Yes or No."}],    
            })

            if(result.data.choices[0].message.content == ("Yes" || "yes" || "Yes." || "yes." || "YES" || "YES.")){
                console.log("For organization related information/ locational information, please select Organizations and Locations!")
            }
            if(result.data.choices[0].message.content == ("No" || "No." || "no." || "no" || "NO" || "NO.")){
                const result1 = await openai
                .createChatCompletion(  
                    {model: "gpt-3.5-turbo", //gpt version
                    messages: [{role: "user", content: input}],    
                })

                // console.log(result0.data.choices[0].message.content) // print the response generated by the GPT3.5
                finalMessage = console.log(result1.data.choices[0].message.content) // print the response generated by the GPT3.5
            }

        }
        if(result0.data.choices[0].message.content == ("No" || "No." || "no." || "no" || "NO" || "NO.")){
            console.log("Sorry, we do not provide this service!Please request animal related information only.")
            // console.log(result0.data.choices[0].message.content) // print the response generated by the GPT3.5
        }
            
        // console.log(result0.data.choices[0].message.content) // print the response generated by the GPT3.5
        console.log("End.")
        userInterface.prompt()
    })
} catch (error){
    console.error(error)
}

// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
